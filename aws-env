#!/usr/bin/env python3
# -*- coding: utf-8 -*-
# Forked off of (and thanks to!):
# https://gist.github.com/naftulikay/14214831f6fa1b9b51a9ae8a00fe79e7

import argparse
import configparser
import os
import sys

CONFIG_PATH      = "~/.aws/config"
CREDENTIALS_PATH = "~/.aws/credentials"

def main():
    parser = argparse.ArgumentParser(prog="aws-env",
        description="Extract AWS credentials for a given profile as environment variables.")
    parser.add_argument('-n', '--no-export', action="store_true",
        help="Do not use export on the variables.")
    parser.add_argument("profile", help="The profile in ~/.aws/credentials to extract credentials for.")

    args = parser.parse_args()

    # load the ini file into a dictionary
    credentials_config = configparser.ConfigParser()
    config = configparser.ConfigParser()

    if not os.path.isfile(os.path.expanduser(CREDENTIALS_PATH)):
        fail("Unable to load credentials file from {}".format(os.path.expanduser(CREDENTIALS_PATH)))

    if not os.path.isfile(os.path.expanduser(CONFIG_PATH)):
        fail("Unable to load config file from {}".format(os.path.expanduser(CONFIG_PATH)))

    credentials_config.read(os.path.expanduser(CREDENTIALS_PATH))
    config.read(os.path.expanduser(CONFIG_PATH))

    # sanity checking
    if not args.profile in credentials_config.sections():
        fail(f"Profile {args.profile} does not exist in credentials file.")
    if not args.profile in config.sections():
        fail(f"Profile {args.profile} does not exist in config file.")

    if not 'aws_access_key_id' in credentials_config[args.profile].keys():
        fail(f"AWS Access Key ID not found in credentials profile: {args.profile}")

    if not 'aws_secret_access_key' in credentials_config[args.profile].keys():
        fail (f"AWS Secret Access Key not found in credentials profile: {args.profile}")

    if not 'region' in config[args.profile].keys():
        fail (f"AWS Default Region not found in config profile: {args.profile}")

    if args.no_export:
        export="set -g"
    else:
        export="set -gx"

    sys.stdout.write(f"{export} AWS_ACCESS_KEY_ID {credentials_config[args.profile]['aws_access_key_id']};\n")
    sys.stdout.write(f"{export} AWS_SECRET_ACCESS_KEY {credentials_config[args.profile]['aws_secret_access_key']};\n")
    sys.stdout.write(f"{export} AWS_REGION {config[args.profile]['region']};\n")
    sys.stdout.flush()

def fail(message):
    sys.stderr.write(message + "\n")
    sys.stderr.flush()
    sys.exit(1)

if __name__ == "__main__":
    main()

