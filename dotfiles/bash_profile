[ -z "$PS1" ] && return

# Ignore same successive entries and entries that start with space. See bash(1) for more options
export HISTCONTROL=ignoreboth
export HISTSIZE=5000
export HISTFILESIZE=5000

export LC_CTYPE=en_US.UTF-8
export CLICOLOR=1

enable_config() {
    if [ -f "${1}" ]; then
        source "${1}";
    fi
}

enable_config "${HOME}/.git-completion.bash"
enable_config "${HOME}/.git-prompt.sh"
enable_config "${HOME}/.config/bash/iterm2_shell_integration.bash"
export GIT_PS1_SHOWDIRTYSTATE='yep'

export TERM=xterm-256color

PS1='\[\e[34;1m\]\t \[\e[33;1m\][\h \[\e[37;1m\]\W\[\e[33;1m\]] \[\e[35;1m\]$(__git_ps1 "(%s)") \[\e[31;1m\]\$ \[\e[0m\]'

alias ls='ls -G'
alias grep='grep --color=auto'

if [ -d "${HOME}/.swiftenv/" ] >/dev/null; then
    export SWIFTENV_ROOT="${HOME}/.swiftenv"
    export PATH="${SWIFTENV_ROOT}/bin:${PATH}"
    eval "$(swiftenv init -)"
fi

export EDITOR="vim"
export DIFF_VIEWER="vimdiff"

if [ "$(uname)" == "Darwin" ];
then
  export DIFF_VIEWER="ksdiff"
  export JAVA_HOME=$(/usr/libexec/java_home -v 1.8)
  if [ -f "$(brew --prefix)/etc/bash_completion" ]; then
    . "$(brew --prefix)/etc/bash_completion"
  fi
fi

shipped() {
    BRANCH=$(git branch | grep \* | awk '{print $2}')
    echo "Deleting ${BRANCH}"
    git checkout master
    git branch -D "${BRANCH}"
    git pull origin master
}

# Totally put this into a buddy's bashrc if they leave their screen unlocked
#osascript -e 'say "linux" using "Zarvox"'

# Work-related
if [ "$(hostname)" = 'z-ops-jmsmith-01' -o "$(hostname)" = 'ops9' ];
then
  # Use local SSH Key
  unset SSH_AUTH_SOCK
  for PATHNAME in "/tmp/ssh-"*"/agent."* "/var/folders/"*"/"*"/"*"/ssh-"*"/agent."*
  do
      if [ ! -w "$PATHNAME" ]
      then continue
      fi
      if [ "$(SSH_AUTH_SOCK="$PATHNAME" ssh-add -l 2>&1)" != "Could not open a connection to your authentication agent." ]
      then export SSH_AUTH_SOCK="$PATHNAME"
      else
          rm -f "$PATHNAME"
          rmdir "$(dirname "$PATHNAME")" 2>"/dev/null" || :
      fi
  done
  if [ -z "$SSH_AUTH_SOCK" ]
  then
      eval "$(ssh-agent)"
      ssh-add
  fi
  if [ "$SSH_AUTH_SOCK" != "$HOME/.ssh/agent" ]
  then ln -fs "$SSH_AUTH_SOCK" "$HOME/.ssh/agent"
  fi
  export SSH_AUTH_SOCK="$HOME/.ssh/agent"
fi

if [ -f "$HOME/.cargo/env" ]; then
  . "$HOME/.cargo/env"
fi
